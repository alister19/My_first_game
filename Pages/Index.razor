@page "/"
@using System.Timers

<style>
    .container {
        width: 400px;
    }

    button {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }
</style>
<div class="container">
    <div class="row">
        @for (var animalNumber = 0; animalNumber < shuffledAnimals.Count; animalNumber++)
        {
            var animal = shuffledAnimals[animalNumber];
            var uniqueDescription = $"Button #{animalNumber}";

            <div class="col-3">
                <button @onclick="@(() => ButtonClick(animal, uniqueDescription))"
                        type="button" class="btn btn-outline-dark">
                    <h1>@animal</h1>
                </button>
            </div>
        }
    </div>
    <div class="row">
        <h2>Matches found: @matchesFound</h2>
    </div>
    <div class="row">
        <h2>Time: @timeDisplay</h2>
    </div>
</div>

@code {
    List<string> animalEmoji =  new List<string>()
    {
            "🐶", "🐶",
            "🐺", "🐺",
            "🐮", "🐮",
            "🦊", "🦊",
            "🐱", "🐱",
            "🐼", "🐼",
            "🦁", "🦁",
            "🐹", "🐹",
    };

    List<string> shuffledAnimals = new List<string>();
    int matchesFound = 0;
    Timer timer;
    int tenthsOfSecondsElapsed = 0;
    string timeDisplay;
    protected override void OnInitialized()
    {
        timer = new Timer(100);
        timer.Elapsed += Timer_Tick;

        SetUpGame();
    }
    private void SetUpGame()
    {
        Random random = new Random();
        shuffledAnimals = animalEmoji
            .OrderBy(item => random.Next())
            .ToList();
        matchesFound = 0;
        tenthsOfSecondsElapsed = 0;
    }
    string LastAnumalFound = string.Empty;
    string LastDescription = string.Empty;

    private void ButtonClick(string animal, string animalDescription)
    {
        if (LastAnumalFound == string.Empty)
        {
            // Выбор первого элемента пары. Запомнить его.
            LastAnumalFound = animal;
            LastDescription = animalDescription;

            timer.Start();
        }
        else if ((LastAnumalFound == animal) && (animalDescription != LastDescription))
        {
            // Совпадение обнаружено! Выполнить сброс для следующей пары.
            LastAnumalFound = string.Empty;

            // Найденные эивотные заменяются пустыми строками.
            shuffledAnimals = shuffledAnimals
                .Select(a => a.Replace(animal, string.Empty))
                .ToList();

            matchesFound++;
            if (matchesFound == 8)
            {
                timer.Stop();
                timeDisplay += " - Play Again";

                SetUpGame();
            }
        }
        else
        {
            // Пользователь выбрал непарных животных
            // Сбросить сохраненный выбор.
            LastAnumalFound = string.Empty;
        }
    }
    private void Timer_Tick(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            tenthsOfSecondsElapsed++;
            timeDisplay = (tenthsOfSecondsElapsed / 10F)
                .ToString("0.0s");
            StateHasChanged();
        });
    }
}